{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","category","console","log","type","value","onChange","target","getGifs","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","index","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OACI,mCACA,sBAAMC,SAdW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAc,SAAAS,GAAQ,OAAKP,GAAL,mBAAoBO,OAC1CN,EAAc,KAGlBO,QAAQC,IAAI,iBAKZ,SACI,uBACIC,KAAK,OACLC,MAAOX,EACPY,SAtBY,SAACT,GACrBF,EAAcE,EAAEU,OAAOF,e,+BCNlBG,EAAO,uCAAG,WAAOP,GAAP,uBAAAQ,EAAA,6DACbC,EADa,iDACmCC,UAAUV,GAD7C,+DAEAW,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCAPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEpC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFHO,EAAU,SAAC,GAAgB,IAAf1B,EAAc,EAAdA,SAGrB,ECLwB,SAACA,GACzB,MAA0BR,mBAAS,CAC/BsB,KAAK,GACLa,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAZAC,qBAAU,WACNvB,EAAQP,GACH+B,MAAK,SAAAC,GACF/B,QAAQC,IAAI8B,GACZH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAAC3B,IAGG4B,EDdyBK,CAAajC,GAAhCoB,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAErB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDvB,IACnD2B,GAAW,mBAAGJ,UAAU,mCAAb,qBACX,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAESA,GADAA,EAAIC,aEdxBgB,EAAe,WAGxB,MAAoC1C,mBAAS,CAAC,cAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAUA,OADAU,QAAQC,IAAIiC,GAER,qCACI,8CACA,cAAC,EAAD,CAAa5C,cAAeA,IAC5B,uBAEA,6BAEO4C,EAAWnB,KAAI,SAAChB,EAAUoC,GAAX,OACd,aADqC,CACpC,EAAD,CAEIpC,SAAUA,GADLA,Y,MCrB7BqC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.74c2bc74.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handInputChange = (e) => {\r\n        setInputValue(e.target.value)             \r\n    }\r\n\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2)\r\n        {\r\n            setCategories(category => [inputValue, ...category])\r\n            setInputValue('')\r\n        }\r\n\r\n        console.log('Submit Hecho')\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handInputChange}\r\n            />\r\n        </form>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories:PropTypes.func.isRequired\r\n}\r\n","\r\n\r\nexport const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=4A4yOnHadVWwjv5ZkMo49pYdGK5txJre`\r\n    const resp = await fetch(url)\r\n    const {data} = await resp.json()\r\n\r\n    const gifs = data.map(img =>{\r\n        return {\r\n            id:img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n// import { getGifs } from '../helpers/getGifs'\r\nimport {GifGridItem} from './GifGridItem'\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    // const [images, setImages] = useState([])\r\n    const { data:images, loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>        \r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>         \r\n          { loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n            <div className='card-grid'>             \r\n                { \r\n                    images.map((img) => (\r\n                        <GifGridItem \r\n                            key={img.id}\r\n                            { ...img } />\r\n                    ))\r\n                }            \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import {getGifs} from '../helpers/getGifs'\r\nimport React, { useState, useEffect } from 'react'\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading:true\r\n    })\r\n\r\n    \r\n    useEffect(()=>{\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                console.log(imgs)\r\n                setstate({\r\n                    data: imgs,\r\n                    loading: false\r\n                })                \r\n            }) \r\n    }, [category])\r\n\r\n  \r\n    return state // {data:[, loading:true]}\r\n}\r\n","import React, {useState} from 'react'\r\nimport {AddCategory} from './AddCategory'\r\nimport {GifGrid} from './GifGrid'\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n   // const categories = ['One Puch', 'samurai X', 'dragon ball']\r\n    const [categories, setCategories] = useState(['samurai X'])\r\n\r\n    // const handleAdd = ()=>{\r\n    //     console.log(categories)\r\n    //     //setCategories([...categories, 'Hunter x Hunter']) // alternativa para no borrar el estado\r\n    //     setCategories(cats =>  [...cats, 'Hunter x Hunter']) // alternativa para no borrar el estado\r\n    // }\r\n\r\n\r\n    console.log(categories)\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />        \r\n\r\n            <ol>\r\n               {\r\n                   categories.map((category, index) => ( // los parentesis indican que se devuelve un objeto\r\n                    <GifGrid \r\n                        key={category}\r\n                        category={category} />\r\n                   ))\r\n               }\r\n            </ol>\r\n           \r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './components/GifExpertApp'\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}